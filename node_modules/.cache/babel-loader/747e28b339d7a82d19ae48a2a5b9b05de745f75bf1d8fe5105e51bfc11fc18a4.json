{"ast":null,"code":"import axios from 'axios';\nimport api from './api';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8082';\nconst CLIENT_ID = 'pointer';\nclass AuthService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      withCredentials: true\n    });\n\n    // Interceptor para adicionar token em todas as requisições\n    this.api.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n  async login(email, senha) {\n    try {\n      const loginData = {\n        clientId: CLIENT_ID,\n        username: email,\n        password: senha,\n        grantType: 'password'\n      };\n      const response = await this.api.post('/token', loginData);\n      const token = response.data.access_token;\n      localStorage.setItem('token', token);\n      return this.decodeToken(token);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  decodeToken(token) {\n    try {\n      var _payload$realm_access;\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n      const payload = JSON.parse(jsonPayload);\n      return {\n        id: payload.sub,\n        email: payload.email,\n        nome: payload.name,\n        roles: ((_payload$realm_access = payload.realm_access) === null || _payload$realm_access === void 0 ? void 0 : _payload$realm_access.roles) || []\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n    return this.decodeToken(token);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data;\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erro no servidor';\n      if (error.response.status === 401) {\n        this.logout();\n      }\n      return new Error(message);\n    } else if (error.request) {\n      return new Error('Não foi possível conectar ao servidor');\n    } else {\n      return new Error('Erro ao processar a requisição');\n    }\n  }\n  async forgotPassword(email) {\n    const response = await api.post('/esqueceu-senha', {\n      email\n    });\n    return response.data;\n  }\n  async verifyCode(email, code) {\n    const response = await api.post('/auth/verify-code', {\n      email,\n      code\n    });\n    return response.data;\n  }\n  async resetPassword(email, password) {\n    const response = await api.post('/auth/reset-password', {\n      email,\n      password\n    });\n    return response.data;\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","api","API_URL","process","env","REACT_APP_API_URL","CLIENT_ID","AuthService","constructor","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","getToken","Authorization","error","Promise","reject","login","email","senha","loginData","clientId","username","password","grantType","response","post","data","access_token","localStorage","setItem","decodeToken","handleError","_payload$realm_access","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","id","sub","nome","name","roles","realm_access","logout","removeItem","getCurrentUser","isAuthenticated","getItem","_error$response$data","message","status","Error","forgotPassword","verifyCode","code","resetPassword","authService"],"sources":["/home/arthur/pointer-ft/pointer-front/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\nimport api from './api';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8082';\nconst CLIENT_ID = 'pointer';\n\nclass AuthService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      withCredentials: true\n    });\n\n    // Interceptor para adicionar token em todas as requisições\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = this.getToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async login(email, senha) {\n    try {\n      const loginData = {\n        clientId: CLIENT_ID,\n        username: email,\n        password: senha,\n        grantType: 'password'\n      };\n\n      const response = await this.api.post('/token', loginData);\n      const token = response.data.access_token;\n      localStorage.setItem('token', token);\n\n      return this.decodeToken(token);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  decodeToken(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>\n        '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      ).join(''));\n\n      const payload = JSON.parse(jsonPayload);\n      return {\n        id: payload.sub,\n        email: payload.email,\n        nome: payload.name,\n        roles: payload.realm_access?.roles || []\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n    return this.decodeToken(token);\n  }\n\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  handleError(error) {\n    if (error.response) {\n      const message = error.response.data?.message || 'Erro no servidor';\n      if (error.response.status === 401) {\n        this.logout();\n      }\n      return new Error(message);\n    } else if (error.request) {\n      return new Error('Não foi possível conectar ao servidor');\n    } else {\n      return new Error('Erro ao processar a requisição');\n    }\n  }\n\n  async forgotPassword(email) {\n    const response = await api.post('/esqueceu-senha', { email });\n    return response.data;\n  }\n\n  async verifyCode(email, code) {\n    const response = await api.post('/auth/verify-code', { email, code });\n    return response.data;\n  }\n\n  async resetPassword(email, password) {\n    const response = await api.post('/auth/reset-password', { email, password });\n    return response.data;\n  }\n}\n\nexport const authService = new AuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}